import ply.yacc as yacc
from lexer import tokens
from lexer import Reserved
from lexer import tokens_reserved
from lexer import Operators


#Rule of Grammar

def p_operators(p):
    '''expression : expression PLUS term
                  | expression MINUS term
       term       : term MULTIPLY factor
                  | term DIVIDE factor'''
    if p[2] == '+':
        p[0] = p[1] + p[3]
    elif p[2] == '-':
        p[0] = p[1] - p[3]
    elif p[2] == '*':
        p[0] = p[1] * p[3]
    elif p[2] == '/':
        p[0] = p[1] / p[3]

def p_expression_paren(p):
    'expression : LPAREN expression RPAREN'
    p[0] = p[2]

def p_expression_num(p):
    '''expression : INT
                  | FLOAT'''
    p[0] = p[1]

def p_error(p):
    if p:
        print(f'Error sintactic: token unexpected "{p.value}"')
    else:
        print(f'Error sintactic: unexpected end of file')

parser = yacc.yacc() 